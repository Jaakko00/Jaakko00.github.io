{"version":3,"sources":["Post.jsx","PostForm.jsx","Posts.js","App.js","reportWebVitals.js","index.js"],"names":["Post","props","Card","bg","post","color","text","className","style","width","Body","Title","title","Subtitle","create_time","Text","content","sender","Button","showDeleteButton","variant","onClick","delete","require","config","filter","PostForm","useState","setContent","setSender","setTitle","password","setPassword","disabled","setDisabled","Navbar","expand","Container","fluid","Brand","Form","Nav","Link","Control","type","value","placeholder","onChange","e","currentTarget","showDelete","Toggle","Offcanvas","id","placement","scroll","backdrop","Header","closeButton","as","rows","length","clean","randomnumber","Math","floor","random","randomColor","then","Posts","state","posts","addNewPost","bind","deletePost","handleShowDeleteButton","a","axios","get","response","setState","data","catch","error","console","log","Date","toISOString","slice","newPost","postToStay","this","sort","b","map","Row","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.933c46fb.chunk.js","sourcesContent":["import React from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\n\n/**\n * Post component contains a single posts features\n */\nfunction Post(props) {\n\n\n  return (\n    <Card\n      bg={props.post.color}\n      text=\"white\"\n      className=\"m-2\"\n      style={{ width: \"30rem\" }}\n    >\n      <Card.Body>\n        <Card.Title className=\"lead\">{props.post.title} </Card.Title>\n        <Card.Subtitle className=\"mb-2 text-light\">\n          {props.post.create_time}\n        </Card.Subtitle>\n        <Card.Text className=\"text-white\">{props.post.content}</Card.Text>\n        <Card.Subtitle className=\"mb-2 text-light\">\n          {/*If the input of sender is empty, it outputs \"-Anonymous\" */}\n          {props.post.sender && \"-\" + props.post.sender}\n          {!props.post.sender && \"-Anonymous\"}\n        </Card.Subtitle>\n        <Button\n          className={props.showDeleteButton()}\n          variant=\"dark\"\n          color=\"white\"\n          onClick={() => props.delete(props.post)} //Calls the delete function from Posts.js\n        >\n          Delete\n        </Button>\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default Post;\n","import React, { useState } from \"react\";\nimport {\n  Button,\n  Form,\n  Offcanvas,\n  Navbar,\n  Container,\n  Nav,\n} from \"react-bootstrap\";\nrequire(\"dotenv\").config();\n\nvar filter = require(\"leo-profanity\");\n\nfunction PostForm(props) {\n  const [content, setContent] = useState(\"\");\n  const [sender, setSender] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [disabled, setDisabled] = useState(\"\");\n\n  /**\n   * randomColor randomly chooses out of 4 bootstrap colors, and if admin is logged in, chooses \"dark\"\n   * @returns {string} color\n   */\n  function randomColor() {\n    var randomnumber = Math.floor(Math.random() * (4 - 1 + 1)) + 1;\n    if(props.showDeleteButton() === \"visible\") {\n      return \"dark\";\n    } else {\n      if (randomnumber === 1) {\n        return \"success\";\n      }\n      if (randomnumber === 2) {\n        return \"danger\";\n      }\n      if (randomnumber === 3) {\n        return \"warning\";\n      } else {\n        return \"info\";\n      }\n\n    }\n  }\n\n  /** onChangeContent sets the state of content with given value */\n  const onChangeContent = (e) => {\n    setContent(e.currentTarget.value);\n  };\n\n  /** onChangeSender sets the state of content with given value */\n  const onChangeSender = (e) => {\n    setSender(e.currentTarget.value);\n  };\n\n  /** onChangeTitle sets the state of content with given value */\n  const onChangeTitle = (e) => {\n    setTitle(e.currentTarget.value);\n  };\n\n  /** onChangePassword sets the state of password with given value */\n  const onChangePassword = (e) => {\n    setPassword(e.currentTarget.value);\n  };\n\n  return (\n    <>\n      <Navbar bg=\"light\" expand={false}>\n        <Container fluid>\n          <Navbar.Brand className=\"display-1\">Bullet-in-Board</Navbar.Brand>\n\n          {/*This form has a password field and a submit button to log in as an admin user*/}\n          <Form className=\"d-flex\" style={{ width: \"20rem\" }}>\n            <Nav.Link disabled>Admin</Nav.Link>\n            <Form.Control\n              className=\"me-2\"\n              type=\"password\"\n              value={password} //Value of the form is its current state\n              placeholder=\"Password\"\n              onChange={onChangePassword} //By changing the value of the form, it gets updated to the state\n              disabled={disabled} //The password form is disabled when you are logged in\n            />\n            <Button\n              onClick={() => {\n                /*\n                If the password is correct or you are already logged in,\n                the delete buttons style toggles, and the password form gets emptied and enabled\n\n                if the password is correct and you are not logged in, the password form gets enabled\n                */\n                if (\n                  password === \"Admin2110\" ||\n                  props.showDeleteButton() === \"visible\"\n                ) {\n                  props.showDelete();\n                  setPassword(\"\");\n                  setDisabled(false);\n                }\n                if (\n                  password === \"Admin2110\" &&\n                  props.showDeleteButton() === \"invisible\"\n                ) {\n                  setDisabled(true);\n                }\n              }}\n            >\n              {props.showDeleteButton() === \"invisible\" && \"Login\"}\n              {props.showDeleteButton() === \"visible\" && \"Logout\"}\n            </Button>\n          </Form>\n\n          <Navbar.Toggle>New post</Navbar.Toggle>\n          <Navbar.Offcanvas\n            id=\"offcanvasNavbar\"\n            aria-labelledby=\"offcanvasNavbarLabel\"\n            placement=\"end\"\n            style={{ width: \"35rem\" }}\n            scroll={true}\n            backdrop={false}\n          >\n            <Offcanvas.Header closeButton>\n              <Offcanvas.Title id=\"offcanvasNavbarLabel\">\n                New post\n              </Offcanvas.Title>\n            </Offcanvas.Header>\n            <Offcanvas.Body>\n              <Form className=\"m-2\" style={{ width: \"10rem\" }}>\n                <Form.Control\n                  className=\"mb-3\"\n                  type=\"text\"\n                  placeholder=\"Title\"\n                  value={title} //Value of the form is its current state\n                  onChange={onChangeTitle} //By changing the value of the form, it gets updated to the state\n                />\n              </Form>\n\n              <Form className=\"m-2\" style={{ width: \"30rem\" }}>\n                <Form.Control\n                  as=\"textarea\"\n                  rows={3}\n                  placeholder=\"Text\"\n                  value={content} //Value of the form is its current state\n                  onChange={onChangeContent} //By changing the value of the form, it gets updated to the state\n                />\n              </Form>\n\n              <Form className=\"m-2\" style={{ width: \"10rem\" }}>\n                <Form.Control\n                  className=\"mb-3\"\n                  type=\"text\"\n                  placeholder=\"From\"\n                  value={sender} //Value of the form is its current state\n                  onChange={onChangeSender} //By changing the value of the form, it gets updated to the state\n                />\n              </Form>\n\n              <Button\n                className=\"m-2\"\n                variant=\"primary\"\n                type=\"submit\"\n                onClick={() => {\n                  //onClick uses props.post method with all the given information, to send the post to the API\n                  if (content.length && title.length) {\n                    props\n                      .post(\n                        //filter.clean filters all profanity of a given string\n                        filter.clean(content),\n                        filter.clean(sender),\n                        filter.clean(title),\n                        randomColor()\n                      )\n                      //After posting, the state is emptied to avoid doubleposting\n                      .then(setContent(\"\"))\n                      .then(setSender(\"\"))\n                      .then(setTitle(\"\"));\n                  }\n                }}\n              >\n                Submit\n              </Button>\n            </Offcanvas.Body>\n          </Navbar.Offcanvas>\n        </Container>\n      </Navbar>\n    </>\n  );\n}\n\nexport default PostForm;\n","import \"./App.css\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport Post from \"./Post\";\nimport PostForm from \"./PostForm\";\nimport { Row } from \"react-bootstrap\";\n\nclass Posts extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { posts: [], showDelete: false };\n\n    this.addNewPost = this.addNewPost.bind(this);\n    this.deletePost = this.deletePost.bind(this);\n    this.showDeleteButton = this.showDeleteButton.bind(this);\n    this.handleShowDeleteButton = this.handleShowDeleteButton.bind(this);\n  }\n\n  async componentDidMount() {\n    axios\n      .get(\"https://bullet-in-board.herokuapp.com/posts\")\n      .then((response) => {\n        this.setState({ posts: response.data });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  /**\n   * addNewPost adds a new post to the database\n   *\n   * After randomly deciding for a color, it creates a newPost with all the given information, and then sends that to the database\n   * @param {string} text\n   * @param {string} sender\n   * @param {string} title\n   */\n  async addNewPost(text, sender, title, color) {\n    console.log(\"Adding post\");\n\n    let create_time = new Date().toISOString().slice(0, 10);\n    let newPost = {\n      content: text,\n      create_time: create_time,\n      sender: sender,\n      title: title,\n      color: color,\n    };\n\n    console.log(newPost);\n\n    axios\n      //makes a POST request with the newly created post\n      .post(\"https://bullet-in-board.herokuapp.com/posts\", newPost)\n      .catch((error) => {\n        console.log(error);\n      })\n      .then((response) => {\n        console.log(\"Added new post\");\n        axios\n          //After adding post, makes a GET request for all the posts, and sets them to the state\n          .get(\"https://bullet-in-board.herokuapp.com/posts\")\n          .then((response) => {\n            this.setState({ posts: response.data });\n          })\n          .catch((error) => {\n            console.log(error);\n          });\n      });\n  }\n\n  /**\n   * deletePost finds the id of the post given, and deletes it off the database and state\n   * @param {object} post\n   */\n  async deletePost(post) {\n    axios\n      .delete(`https://bullet-in-board.herokuapp.com/posts/${post.id}`)\n      .then((response) => {\n        this.setState({\n          posts: this.state.posts.filter(\n            (postToStay) => postToStay.id !== post.id\n          ),\n        });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  /**\n   * handleShowDeleteButton() toggles the boolean state of showDelete\n   */\n  handleShowDeleteButton() {\n    this.setState(({showDelete}) => ({ showDelete: !showDelete }));\n  }\n\n\n  /**\n   * showDeleteButton() returns a React-Boostrap style prop of either \"visible\" or \"invisible\"\n   */\n  showDeleteButton() {\n    if (this.state.showDelete) {\n      return \"visible\";\n    } else {\n      return \"invisible\";\n    }\n  }\n\n  render() {\n    let sortedPosts = this.state.posts.sort((a, b) => b.id - a.id);\n    let posts = sortedPosts.map((post) => (\n      <Post\n        key={post.id}\n        post={post}\n        delete={this.deletePost}\n        showDeleteButton={this.showDeleteButton}\n      ></Post>\n    ));\n    return (\n      <>\n        <PostForm\n          post={this.addNewPost}\n          showDelete={this.handleShowDeleteButton}\n          showDeleteButton={this.showDeleteButton}\n        ></PostForm>\n\n        <Row className=\"justify-content-center\">{posts}</Row>\n      </>\n    );\n  }\n}\n\nexport default Posts;\n","import \"./App.css\";\nimport React from \"react\";\nimport Posts from \"./Posts\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nclass App extends React.Component {\n  render() {\n    return (\n      <Posts></Posts>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}